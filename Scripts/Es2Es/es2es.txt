#!/bin/bash

##################################################################
#   Migrate data from one instance of ElasticSearch to another   #
#                                                                #
#   Requirements: npm install -g elasticdump                     #
#   Programming languages used: bash, awk, javascript            #
#                                                                #
#   Developed by George Focsa - Luxoft                           #
##################################################################

# For total execution time calculation
start=`date +%s`

# ElasticSearch parameters
es_old_host="127.0.0.1"
es_old_port="19200"

es_new_host="127.0.0.1"
es_new_port="29200"

# ----------- Start ----------- #
echo " "
echo "*** Starting the data migration procedure ***"
echo "* ${es_old_host}:${es_old_port} to ${es_new_host}:${es_new_port} *"

#
# ----------- Step 1 ----------- #
# There are several operations performed in this step:
#   a. A query is sent to the old ElasticSearch instance to retrieve all indices
#   b. Indices are stored in a array "1 x n" (list)
#   c. A validation check is performed by counting the elements of the list
#   d. If the list is empty, there's no point going forward and we exit with error
#   e. If the list is not empty, we show the total number of indices found
#
echo " "
echo "Step 1: Fetching all indices from ${es_old_host}:${es_old_port}"

indices_list=$(curl -s -X GET "http://${es_old_host}:${es_old_port}/_cat/indices/%2A?v=&s=index:desc" | awk '{print $3}' | sed -n '1!p')

if [ -z "${indices_list}" ]
then
    echo " Error: No indices were found!"
    echo "*** Stopping the data migration procedure ***"
    exit 1
else
    indices_total=$(echo "${indices_list}" | wc -l)
    echo " Result: Found ${indices_total} indices in ${es_old_host}:${es_old_port}"
fi

#
# ----------- Step 2 ----------- #
# There are several operations performed in this step:
#   a. Define a variable to know which index we are processing (increment it at the end of each processing itteration)
#   b. Loop thru all indices from the list
#   c. Send the mapping for each index to the new ElasticSearch instance
#   d. Send the data for each index to the new ElasticSearch instance
#   e. The c. & d. operations are done for each corresponding index
#   f. Notify the user regarding migration status, "indices migrated" compared to "total indices"
#
echo " "
echo "Step 2: Importing all indices to ${es_new_host}:${es_new_port}"

count=0
echo " " # Initialize the empty line that will be overwritten, DO NOT REMOVE!
for index in ${indices_list}
do
    # Let's not flood the console with billions of messages
    # Always overwrite the last "Processing index X out of Y total indices" message
    echo -e " \e[1A\e[KProcessing index ${count} out of ${indices_total} total indices"

    elasticdump --noRefresh --limit=9990 --input=http://${es_old_host}:${es_old_port}/${index} --output=http://${es_new_host}:${es_new_port}/${index} --type=mapping >/dev/null 2>&1
    elasticdump --noRefresh --limit=9900 --input=http://${es_old_host}:${es_old_port}/${index} --output=http://${es_new_host}:${es_new_port}/${index} --type=data >/dev/null 2>&1

    count=$((count+1))
done

if [ ${count} != ${indices_total} ]
then
    percentage_ok=$((count*100/indices_total))
    echo " Error: Not all indices were imported. Only ${count} (${percentage_ok}%) imported successfully (${count} / ${indices_total})."
else
    echo " Result: All (${count} / ${indices_total}) imported successfully."
    echo " "
    echo "*** End of data migration procedure ***"
fi

#
# ----------- Step 3 ----------- #
# In this last step it's shown how long it took to finalise the script execution
# Basically, this can be used as an estimation regarding data migration time
#
# For total execution time calculation
end=`date +%s`
runtime=$((end-start))

echo " "
echo "*** Total execution time: ${runtime} sec***"
echo " "
exit 0

# ----------- End ----------- #
